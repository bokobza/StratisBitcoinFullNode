using System;
using System.IO;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.EntityFrameworkCore.Internal;
using NBitcoin.Protocol;
using Stratis.Bitcoin;
using Stratis.Bitcoin.Builder;
using Stratis.Bitcoin.Configuration;
using Stratis.Bitcoin.Features.Api;
using Stratis.Bitcoin.Features.Apps;
using Stratis.Bitcoin.Features.BlockStore;
using Stratis.Bitcoin.Features.Consensus;
using Stratis.Bitcoin.Features.MemoryPool;
using Stratis.Bitcoin.Features.Miner;
using Stratis.Bitcoin.Features.RPC;
using Stratis.Bitcoin.Features.ColdStaking;
using Stratis.Bitcoin.Networks;
using Stratis.Bitcoin.Utilities;

namespace Stratis.StratisD
{
    public class Program
    {
        public static async Task Main(string[] args)
        {
            try
            {
#if DEBUG
                args = AddCommitHash(args);
#endif

                var nodeSettings = new NodeSettings(networksSelector: Networks.Stratis, protocolVersion: ProtocolVersion.PROVEN_HEADER_VERSION, args: args)
                {
                    MinProtocolVersion = ProtocolVersion.ALT_PROTOCOL_VERSION
                };

                IFullNode node = new FullNodeBuilder()
                    .UseNodeSettings(nodeSettings)
                    .UseBlockStore()
                    .UsePosConsensus()
                    .UseMempool()
                    .UseColdStakingWallet()
                    .AddPowPosMining()
                    .UseApi()
                    .UseApps()
                    .AddRPC()
                    .Build();

                if (node != null)
                    await node.RunAsync();
            }
            catch (Exception ex)
            {
                Console.WriteLine("There was a problem initializing the node. Details: '{0}'", ex.ToString());
            }
        }

        /// <summary>
        /// Add the git commit short hash to the agent prefix.
        /// Should only be used in debug builds.
        /// </summary>
        /// <param name="args">The arguments passed by the user.</param>
        /// <returns>The arguments, augmented by the commit.</returns>
        private static string[] AddCommitHash(string[] args)
        {
            // Gets the file contaning the git commit hash, generated by the post-build events.
            string commitLogPath = Path.Combine(Directory.GetCurrentDirectory(), "commit.log");

            if (!File.Exists(commitLogPath))
            {
                return args;
            }

            // Gets the short git commit hash.
            string commitHash = File.ReadAllText(commitLogPath).Substring(0, 4);

            // Adds the hash to the agent prefix if it exists, or create an agent prefix it it doesn't.
            string agentPrefix = args.SingleOrDefault(a => a.Contains("agentprefix"));
            if (string.IsNullOrEmpty(agentPrefix))
            {
                args = args.Concat(new[] { $"agentprefix={commitHash}" }).ToArray();
            }
            else
            {
                int index = args.IndexOf(agentPrefix);
                args[index] = $"{agentPrefix}-{commitHash}";
            }

            return args;
        }
    }
}
